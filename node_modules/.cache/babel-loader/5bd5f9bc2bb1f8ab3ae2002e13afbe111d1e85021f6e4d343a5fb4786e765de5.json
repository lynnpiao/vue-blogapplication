{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      userName: null,\n      postID: null,\n      blogComments: []\n    };\n  },\n  created() {\n    let url = \"\";\n    // Retrieve the userName and postID query parameters from the route\n    this.userName = this.$route.query.userName;\n    this.postID = String(this.$route.query.postID);\n    console.log(\"created\");\n    console.log(this.$route.query.userName);\n    console.log(this.$route.query.postID);\n    console.log(typeof this.$route.query.postID);\n    console.log(this.postID);\n    console.log(typeof this.postID);\n    if (this.userName !== null && this.userName !== \"\") {\n      url = \"https://yapi.pro/mock/370002/findBlogComments_1714592516195\";\n    } else if (this.postID !== null && this.postID !== \"\") {\n      url = \"https://yapi.pro/mock/370002/findBlogComments\";\n    }\n    // }\n    // Fetch blog comments data using the userName or postID\n    this.fetchBlogComments(url);\n  },\n  methods: {\n    fetchBlogComments(url) {\n      // Fetch data from an API using Axios\n      // Replace 'https://api.example.com/blogPosts' with your actual API endpoint\n      axios.get(url, {\n        params: {\n          userName: this.userName,\n          postID: this.postID\n        }\n      }).then(response => {\n        // Assign fetched data to blogPosts array\n        this.blogComments = response.data.data;\n      }).catch(error => {\n        // Handle errors\n        console.error(\"Error fetching blog posts:\", error);\n      });\n    }\n  },\n  mounted() {\n    // Fetch data using axios or any other method\n    this.fetchBlogComments();\n  }\n};","map":{"version":3,"names":["axios","data","userName","postID","blogComments","created","url","$route","query","String","console","log","fetchBlogComments","methods","get","params","then","response","catch","error","mounted"],"sources":["src/views/FindBlogCommentsView.vue"],"sourcesContent":["<template>\n  <el-container>\n    <el-header class=\"custom-header\"\n      >Search BlogComments By {{ this.userName ? this.userName : this.postID }}\n    </el-header>\n    <el-main>\n      <el-table :data=\"blogComments\" border style=\"width: 100%\">\n        <el-table-column prop=\"commentID\" label=\"CommentID\" width=\"fit-content\">\n        </el-table-column>\n        <el-table-column prop=\"postID\" label=\"postID\" width=\"fit-content\">\n        </el-table-column>\n        <el-table-column prop=\"userName\" label=\"UserName\" width=\"fit-content\">\n        </el-table-column>\n        <el-table-column prop=\"content\" label=\"Content\" width=\"fit-content\">\n        </el-table-column>\n        <el-table-column prop=\"created\" label=\"CreateDate\" width=\"fit-content\">\n        </el-table-column>\n      </el-table>\n    </el-main>\n  </el-container>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      userName: null,\n      postID: null,\n      blogComments: [],\n    };\n  },\n  created() {\n  let url = \"\"; \n  // Retrieve the userName and postID query parameters from the route\n  this.userName = this.$route.query.userName;\n  this.postID = String(this.$route.query.postID);\n\n  console.log(\"created\");\n  console.log(this.$route.query.userName);\n  console.log(this.$route.query.postID);\n  console.log(typeof this.$route.query.postID);\n  console.log(this.postID);\n  console.log(typeof this.postID);\n\n   if (this.userName !== null && this.userName !== \"\") {\n        url = \"https://yapi.pro/mock/370002/findBlogComments_1714592516195\";} \n      else if (this.postID !== null && this.postID !== \"\") {\n        url = \"https://yapi.pro/mock/370002/findBlogComments\";}\n      // }\n  // Fetch blog comments data using the userName or postID\n  this.fetchBlogComments(url);\n},\n  methods: {\n    fetchBlogComments(url) {\n      // Fetch data from an API using Axios\n      // Replace 'https://api.example.com/blogPosts' with your actual API endpoint\n      axios\n        .get(url, {\n          params: {\n            userName: this.userName,\n            postID: this.postID,\n          },\n        })\n        .then((response) => {\n          // Assign fetched data to blogPosts array\n          this.blogComments = response.data.data;\n        })\n        .catch((error) => {\n          // Handle errors\n          console.error(\"Error fetching blog posts:\", error);\n        });\n    },\n  },\n  mounted() {\n    // Fetch data using axios or any other method\n    this.fetchBlogComments();\n  },\n};\n</script>\n<style>\n.custom-header {\n  /* background-color: #409EFF; */\n  color: black;\n  font-size: 30px;\n  font-weight: bold; \n  font-family: Arial, sans-serif;\n}\n</style>"],"mappings":"AAuBA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,MAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACA,IAAAC,GAAA;IACA;IACA,KAAAJ,QAAA,QAAAK,MAAA,CAAAC,KAAA,CAAAN,QAAA;IACA,KAAAC,MAAA,GAAAM,MAAA,MAAAF,MAAA,CAAAC,KAAA,CAAAL,MAAA;IAEAO,OAAA,CAAAC,GAAA;IACAD,OAAA,CAAAC,GAAA,MAAAJ,MAAA,CAAAC,KAAA,CAAAN,QAAA;IACAQ,OAAA,CAAAC,GAAA,MAAAJ,MAAA,CAAAC,KAAA,CAAAL,MAAA;IACAO,OAAA,CAAAC,GAAA,aAAAJ,MAAA,CAAAC,KAAA,CAAAL,MAAA;IACAO,OAAA,CAAAC,GAAA,MAAAR,MAAA;IACAO,OAAA,CAAAC,GAAA,aAAAR,MAAA;IAEA,SAAAD,QAAA,kBAAAA,QAAA;MACAI,GAAA;IAAA,OACA,SAAAH,MAAA,kBAAAA,MAAA;MACAG,GAAA;IAAA;IACA;IACA;IACA,KAAAM,iBAAA,CAAAN,GAAA;EACA;EACAO,OAAA;IACAD,kBAAAN,GAAA;MACA;MACA;MACAN,KAAA,CACAc,GAAA,CAAAR,GAAA;QACAS,MAAA;UACAb,QAAA,OAAAA,QAAA;UACAC,MAAA,OAAAA;QACA;MACA,GACAa,IAAA,CAAAC,QAAA;QACA;QACA,KAAAb,YAAA,GAAAa,QAAA,CAAAhB,IAAA,CAAAA,IAAA;MACA,GACAiB,KAAA,CAAAC,KAAA;QACA;QACAT,OAAA,CAAAS,KAAA,+BAAAA,KAAA;MACA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAR,iBAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}